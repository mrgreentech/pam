// Media queries
//
// Wrap a `min-width`, `max-width` or a `min- to max-width` media query
// around a selector context with provided rules. You can even use
// declared detached rulesets for properties and selectors.
//
//```less
//  // Example
//  @property-ruleset: { display: none; };
//  @selector-ruleset: {
//      [detached-ruleset] {
//          display: none;
//      };
//  };
//
//  body {
//      .media-min-width(600px, @property-ruleset);
//      .media-min-width(600px, @selector-ruleset);
//  }
//
//  // Output
//  body {
//      @media screen and (min-width: 600px) {
//          display: none;
//
//          [detached-ruleset] {
//              display: none;
//          }
//      }
//  }
//```
//
// Style guide: mixins.media

// ==================================================================
//  Responsive mixins
// ==================================================================

// .media-min-width(@breakpoint; @rules)
//
// Wrap a `min-width` media query around a selector context with provided rules.
//
// @breakpoint - Breakpoint for min-width.
// @rules - What rules to apply to the media query.
//
// Weight: 1
//
// Style guide: mixins.media.min-width

.media-min-width(@breakpoint; @rules) {
    @media screen and (min-width: @breakpoint) {
        @rules();
    }
}

// .media-max-width(@breakpoint; @rules)
//
// Wrap a `max-width` media query around a selector context with provided rules.
//
// @breakpoint - Breakpoint for max-width.
// @rules - What rules to apply to the media query.
//
// Weight: 2
//
// Style guide: mixins.media.max-width

.media-max-width(@breakpoint; @rules) {
    @media screen and (max-width: @breakpoint) {
        @rules();
    }
}

// .media-min-max-width(@breakpoint; @rules)
//
// Wrap a `min- to max-width` media query around a selector context with provided rules.
//
// @breakpoint-min - Breakpoint for max-width.
// @breakpoint-max - Breakpoint for max-width.
// @rules - What rules to apply to the media query.
//
// Weight: 3
//
// Style guide: mixins.media.min-max-width

.media-min-max-width(@breakpoint-min; @breakpoint-max; @rules) {
    @media screen and (max-width: @breakpoint) and (max-width: @breakpoint-max) {
        @rules();
    }
}

// .responsive-selector(@selector, @prefix, @fraction-list)
//
// Generates responsive fractions for supported screen sizes.
// Uses `.fractions` to generate the fractions.
//
// @selector - Selector name.
// @modifier = "" - Modifier name.
// @screens = @screen-sizes - List of screen sizes to generate selectors for.
//
// Weight: 4
//
// Style guide: mixins.media.responsive-selector

.responsive-selector(@selector; @modifier; @rules; @screens: @screen-sizes) {
    each(@screens, {
        @screen: "screen-@{value}";

        @media screen and (min-width: @@screen) {
            [@{selector}~="@{value}:@{modifier}"] {
                @rules();
            }
        }
    });
}
