// Forms
//
// Put together variation of forms and form controls with form control selectors, custom components and some layout variations.
//
// Markup:
// <form pam-Form="stacked fluid padded">
//     <div pam-Grid>
//         <div pam-Unit="1-1 medium:1-2">
//             <fieldset>
//                 <legend>Text and select</legend>
//                 <label for="input-name">Name</label>
//                 <input id="input-name" type="text" placeholder="What is it?">
//                 <label for="input-email">Email</label>
//                 <input id="input-email" type="email" placeholder="Spam time">
//                 <label for="input-password">Password</label>
//                 <input id="input-password" type="password" placeholder="A secret...">
//                 <label for="select-geek">Choose geek level</label>
//                 <select id="select-geek">
//                     <option value="geek">Geek</option>
//                     <option value="nerd">Nerd</option>
//                     <option value="dork">Dork</option>
//                 </select>
//                 <label for="textarea-description">Please explain</label>
//                 <textarea rows="5" placeholder="The secret of 42..."></textarea>
//             </fieldset>
//         </div>
//         <div pam-Unit="1-1 medium:1-2">
//             <fieldset>
//                 <legend>Checkboxes</legend>
//                 <label>
//                     <input type="checkbox" value=""> IÂ´m a hipster
//                 </label>
//                 <label>
//                     <input type="radio" id="radio1" name="optionsRadios" value="radios" checked> Hipster
//                 </label>
//                 <label>
//                     <input type="radio" id="radio2" name="optionsRadios" value="radios"> Geek
//                 </label>
//             </fieldset>
//             <fieldset>
//                 <legend>Misc</legend>
//                 <label for="input-file">File</label>
//                 <input id="input-file" type="file">
//                 <label for="input-color">Color</label>
//                 <input id="input-color" type="color">
//             </fieldset>
//         </div>
//     </div>
// </form>
//
// Weight: 5
//
// Style guide: forms

// TODO: form grid layouts
// TODO: Update select box
// TODO: Update input size to input width
// TODO: form control sizes


// Variables
// ==========================================================================

@form-background: rgba(255, 255, 255, 0.1);
@form-border: @skin-light;
@form-border-radius: @border-radius-base;
@form-border-width: 1px;
@form-color: @skin-text-primary;
@form-font-size: @font-size-large;
@form-line-height: 18px;
@form-margin: @space-16;
@form-padding: @space-8;
@form-placeholder-color: @skin-text-secondary;

@form-focus-color: darken(@form-border, 30%);
@form-focus-border: darken(@form-border, 30%);

@form-success-border: @skin-success;
@form-success-background: lighten(@skin-success, 45%);
@form-success-color: @skin-success;

@form-danger-border: @skin-danger;
@form-danger-background: lighten(@skin-danger, 40%);
@form-danger-color: @skin-danger;

@form-input-group-margin: @space-8;
@form-input-group-addon-space: @space-60;

@form-padding-vertical: 10px;
@form-padding-horizontal: @space-8;


// ==========================================================================
//  Form
// ==========================================================================

[pam-Form] input,
[pam-Form] select,
[pam-Form] textarea {
    font-family: inherit;
    background-color: @form-background;
    border-radius: @form-border-radius;
    border: @form-border-width solid @form-border;
    box-sizing: border-box;
    color: @form-color;
    display: inline-block;
    font-size: @form-font-size;
    line-height: @form-line-height;
    margin: 0 0 0.5rem;
    transition: border 0.3s;
    // vertical-align: middle;
    padding: @form-padding-vertical @form-padding-horizontal;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

    .placeholder-color(@form-placeholder-color);
    .hook-form;
}

[pam-Form] textarea {
    font-family: @font-family;
    height: auto;
}

// Limited support for this type.
[pam-Form] input[type="color"] {
    height: @space-40;
    padding: @space-base;
}


[pam-Form] input:focus,
[pam-Form] select:focus,
[pam-Form] textarea:focus {
    outline: 0;
    border: @form-border-width solid @form-focus-border;

    .hook-form-focus;
}

[pam-Form] input[type="file"]:focus,
[pam-Form] input[type="radio"]:focus,
[pam-Form] input[type="checkbox"]:focus {
    // outline: thin dotted @skin-divider;
    // outline: @form-border-width auto @skin-divider;
}

[pam-Form] input[type="color"]:focus {
    border-color: @skin-divider;
}


// Sub-modifier: Input placeholder properties
// ========================================================================

// [pam-Form] input,
// [pam-Form] select,
// [pam-Form] textarea {
//     .placeholder-color;

//     .hook-form-placeholder;
// }


//  Disabled Input
// ==========================================================================

[pam-Form] input[disabled],
[pam-Form] select[disabled],
[pam-Form] textarea[disabled] {
    cursor: not-allowed;
    color: @skin-text-secondary;

    .hook-form-disabled;
}


//  Read-only input
// ==========================================================================

[pam-Form] input[readonly],
[pam-Form] select[readonly],
[pam-Form] textarea[readonly] {
    color: @skin-text-primary;
    border-color: @form-border;

    .hook-form-readonly;
}

[pam-Form] input[readonly]:focus,
[pam-Form] select[readonly]:focus,
[pam-Form] textarea[readonly]:focus {
    color: @skin-text-secondary;
    border-color: @form-border;

    .hook-form-readonly-focus;
}


//  Required input
// ==========================================================================

[pam-Form] input:focus:invalid,
[pam-Form] textarea:focus:invalid,
[pam-Form] select:focus:invalid {
    border-color: @form-danger-color;

    .hook-form-focus-invalid;
}

[pam-Form] input:focus:invalid:focus,
[pam-Form] textarea:focus:invalid:focus,
[pam-Form] select:focus:invalid:focus {
    border-color: @form-danger-color;

    .hook-form-focus-invalid-focus;
}

[pam-Form] input[type="file"]:focus:invalid:focus,
[pam-Form] input[type="radio"]:focus:invalid:focus,
[pam-Form] input[type="checkbox"]:focus:invalid:focus {
    outline-color: @form-danger-color;

    .hook-form-focus-invalid-focus;
}


//  Select
// ========================================================================

[pam-Form] select:not([multiple]):not([pam-Select]):not([pam-form-Control]) {
    height: @space-40;
    padding: 0;

    .hook-form-select;
}

[pam-Form] select[multiple] {
    height: auto;
    overflow: auto;

    .hook-form-select-multiple;
}

[pam-Form] select:focus {
    .hook-form-select-focus;
}


//  Legend
// ========================================================================

[pam-Form] legend {
    display: block;
    font-size: @font-size-xlarge;
    margin-bottom: @space-8;
    padding: @space-8 0;
    width: 100%;

    .hook-form-legend;
}


//  Fieldset
// ========================================================================

[pam-Form] fieldset {
    border: 0;
    margin: 0;
    padding: @space-8 0 1rem;

    .hook-form-fieldset;
}


//  Label
// ========================================================================

[pam-Form] label {
    margin: @space-8 0;

    .hook-form-label;
}


// TODO: Move to traits
[pam-padded] {
    padding: @space-16;
}


// Modifier: State
// ==========================================================================

// State
//
// Use states to give users feedback related to form controls
// by using native or custom states.
//
// Weight: 1
//
// Style guide: forms.states

// Native
//
// Add the native form attributes `disabled`, `readonly` and `required`
// to use with PAM forms.
//
// Markup:
// <form pam-Form>
//      <input type="text" placeholder="Input" {{modifier_class}}>
// </form>
//
// disabled - makes a input field disabled.
// readonly - attribute puts a input to a read-only state.
// required - attribute marks a input control as required.
//
// Weight: 1
//
// Style guide: forms.states.native


//  Sub-modifier: Custom states
// ========================================================================

// Custom
//
// Use the `pam-Form-State` to apply the custom form states `success` or `danger`.
//
// Markup:
// <form pam-Form>
//      <input type="text" placeholder="Input" pam-Form-State="{{modifier_class}}">
// </form>
//
// success - attribute marks a success state for the input.
// danger - attribute marks a error state for the input.
//
// Weight: 2
//
// Style guide: forms.states.custom

[pam-Form] input[pam-Form-State~="success"],
[pam-Form] input[pam-Form-State~="success"]:focus,
[pam-Form] select[pam-Form-State~="success"],
[pam-Form] select[pam-Form-State~="success"]:focus,
[pam-Form] textarea[pam-Form-State~="success"],
[pam-Form] textarea[pam-Form-State~="success"]:focus {
    background-color: @form-success-background;
    border: @form-border-width solid @form-success-border;
    color: @form-success-color;
}

[pam-Form] input[pam-Form-State~="danger"],
[pam-Form] input[pam-Form-State~="danger"]:focus,
[pam-Form] select[pam-Form-State~="danger"],
[pam-Form] select[pam-Form-State~="danger"]:focus,
[pam-Form] textarea[pam-Form-State~="danger"],
[pam-Form] textarea[pam-Form-State~="danger"]:focus {
    background-color: @form-danger-background;
    border: @form-border-width solid @form-danger-border;
    color: @form-danger-color;
}


// Sub-modifier: Size
// ========================================================================

// Size
//
// Adjust size of `input`, `select` or `textarea` with `pam-Form-Size`.
//
// Markup:
// <form pam-Form="stacked">
//     <input pam-Form-Size="large" type="text" id="password" placeholder="Large">
//     <input type="text" id="password" placeholder="Default">
//     <input pam-Form-Size="small" type="text" id="password" placeholder="Small">
// </form>
//
// Weight: 3
//
// Style guide: forms.size

[pam-Form] [pam-Form-Size~="large"] {
    font-size: @font-size-larger;
    height: @space-56;
    line-height: @line-height-base;
}

[pam-Form] [pam-Form-Size~="small"] {
    font-size: @font-size-medium;
    height: @space-32;
    line-height: @line-height-base;
}


// Sub-modifier: Width
// ========================================================================

// Width
//
// Adjust width of `input`, `select` or `textarea` with
// `pam-Form-Width` which supports thirds and fifths.
//
// Markup:
// <form pam-Form="stacked">
//     <input pam-Form-Width="1-1" type="text" id="password" placeholder="1-1">
//     <input pam-Form-Width="2-3" type="text" id="password" placeholder="2-3">
//     <input pam-Form-Width="1-2" type="text" id="password" placeholder="1-2">
//     <input pam-Form-Width="1-3" type="text" id="password" placeholder="1-3">
//     <input pam-Form-Width="1-4" type="text" id="password" placeholder="1-4">
// </form>
//
// Weight: 5
//
// Style guide: forms.width

[pam-Form] [pam-Form-Width~="1-1"] {
    width: 100%;
}

[pam-Form] [pam-Form-Width~="2-3"] {
    width: 66%;
}

[pam-Form] [pam-Form-Width~="1-2"] {
    width: 50%;
}

[pam-Form] [pam-Form-Width~="1-3"] {
    width: 33%;
}

[pam-Form] [pam-Form-Width~="1-4"] {
    width: 25%;
}


// TODO: Add text trait

[pam-text~="center"] {
    text-align: center;
}


//  Modifier: Stacked
// ==========================================================================

// Layout
//
// Form layout variations
//
// Weight: 10
//
// Style guide: forms.layout

// Default
//
// `pam-Form` creates a default inline form.
//
// Markup:
// <form pam-Form>
//     <input type="email" placeholder="Email">
//     <input type="password" placeholder="Password">
//     <input type="button" pam-Button="small" value="Log in">
// </form>
//
// Weight: 1
//
// Style guide: forms.layout.inline

// Stacked
//
// `pam-Form="stacked"` Creates a stacked form.
//
// Markup:
// <form pam-Form="stacked">
//     <input type="email" placeholder="Email">
//     <input type="password" placeholder="Password">
//     <input type="button" pam-Button="small" value="Log in">
// </form>
//
// Weight: 2
//
// Style guide: forms.layout.stacked

[pam-Form~="stacked"] input:not([type="checkbox"]):not([type="radio"]),
[pam-Form~="stacked"] select,
[pam-Form~="stacked"] label,
[pam-Form~="stacked"] textarea {
    display: block;
    margin: @space-8 0;

    .hook-form-stacked;
}


//  Modifier: Aligned
// ==========================================================================

// Aligned
//
// `pam-Form="aligned"` Creates a aligned form with labels to the left of the input fields.
//
// Markup:
// <form pam-Form="aligned">
//     <div pam-Control="group">
//         <label for="email">Email</label>
//         <input type="email" id="password" placeholder="Email">
//     </div>
//     <div pam-Control="group">
//         <label for="password">Password</label>
//         <input type="password" id="password" placeholder="Password">
//     </div>
//     <div pam-Controls>
//         <input type="button" pam-Button="small" value="Log in">
//     </div>
// </form>
//
// Weight: 3
//
// Style guide: forms.layout.aligned

[pam-Form~="aligned"] input,
[pam-Form~="aligned"] textarea,
[pam-Form~="aligned"] select {
    display: inline-block;
    margin-bottom: 0;
    vertical-align: middle;

    .hook-form-aligned;
}

[pam-Form~="aligned"] textarea {
    vertical-align: top;
}

[pam-Form~="aligned"] [pam-Control~="group"] {
    align-items: center;
    display: flex;
    margin-bottom: @space-8;
}

[pam-Form~="aligned"] [pam-Control~="group"] label {
    display: inline-block;
    margin: 0 1rem 0 0;
    text-align: right;
    vertical-align: middle;
    width: 10rem;
}

[pam-Form~="aligned"] [pam-Controls] {
    margin: @space-8 0 0 11em;
}


[pam-Form~="fluid"] {
    input:not([type="radio"]):not([type="checkbox"]),
    select,
    textarea {
        width: 100%;
    }
}

[pam-Form~="padded"] {
    fieldset {
        padding: @space-8 0 @space-16;
    }
}

@media screen and (min-width: @breakpoint-medium) {
    [pam-Form~="padded"] {
        fieldset {
            padding: @space-16;
        }
    }
}


//  Sub-object: Grouped inputs
// ==========================================================================

// Grouped fields
//
// `pam-Group` combined with a `<fieldset>` element will group a set of text inputs.
//
// Markup:
// <form pam-Form>
//     <fieldset pam-Group>
//         <input type="text" placeholder="Username">
//         <input type="email" placeholder="Email">
//         <input type="password" placeholder="Password">
//     </fieldset>
//     <fieldset pam-Group>
//         <input type="text" placeholder="Nickname">
//         <input type="text" placeholder="City">
//         <input type="text" placeholder="Favorite movie">
//     </fieldset>
//     <input type="button" pam-Button="small" value="Log in">
// </form>
//
// Weight: 2
//
// Style guide: forms.layout.grouped

[pam-Form] fieldset[pam-Group] {
    padding-bottom: @space-16;
}

[pam-Form] fieldset[pam-Group]:last-of-type {
    padding-bottom: @space-24;
}

[pam-Form] [pam-Group] input {
    display: block;
    position: relative;

    .hook-form-group;
}

[pam-Form] [pam-Group] input:last-child {
    margin-bottom: 0;
}

[pam-Form] [pam-Group] button {
    margin: 0.5rem 0;
}


// Sub-object: Form message
// ========================================================================

// Message
//
// `pam-Form-Message` is a helper element that shows text
// under or on the side of a form field.
//
// Weight: 18
//
// Style guide: forms.message

// Block
//
// The default message is a block element
//
// Markup:
// <form pam-Form="stacked">
//     <fieldset>
//         <label>Username</label>
//         <input type="text">
//         <aside pam-Form-Message>Block help text</aside>
//     </fieldset>
// </form>
//
// Style guide: forms.message.block

// Inline
//
// To display the message inline apply the `inline`
// value to `pam-Form-Message`.
//
// Markup:
// <form pam-Form>
//     <fieldset>
//         <label>Username</label>
//         <input type="text">
//         <aside pam-Form-Message="inline">Block help text</aside>
//     </fieldset>
// </form>
//
// Style guide: forms.message.inline

[pam-Form-Message] {
    color: @skin-text-primary;
    display: block;
    font-size: @font-size-xsmall;

    .hook-form-message;
}

// Sub-modifier: Form input inline message

[pam-Form-Message~="inline"] {
    color: @skin-text-primary;
    display: inline-block;
    font-size: @font-size-xsmall;
    padding-left: @space-8;
    vertical-align: middle;

    .hook-form-message-inline;
}


// Sub-objects: Custom controls
// ========================================================================

// Custom controls
//
// There are group of custom controls to use which gives more flexibility
// and control over the form controls.
//
// Weight: 20
//
// Style guide: forms.custom


// Sub-object: Inline
// ========================================================================

// Icon
//
// `pam-Form-Inline` can group a form control with a icon. To apply the icon on the right side use `pam-Form-Inline="reverse"`.
//
// Markup:
// <form pam-Form>
//     <div pam-Form-Inline>
//         <label for="group-input" pam-Form-Icon>
//             <div sg-mock-icon></div>
//         </label>
//         <input id="group-input" type="text" placeholder="Input group" pam-Form-Control>
//     </div>
//     <div pam-Form-Inline>
//         <label for="group-select" pam-Form-Icon>
//             <div sg-mock-icon></div>
//         </label>
//         <select id="group-select" pam-Form-Control>
//             <option value="geek">Geek</option>
//             <option value="nerd">Nerd</option>
//             <option value="dork">Dork</option>
//         </select>
//     </div>
//     <div pam-Form-Inline="reverse">
//         <label for="group-input-reverse" pam-Form-Icon>
//             <div sg-mock-icon></div>
//         </label>
//         <input id="group-input-reverse" type="text" placeholder="Input group" pam-Form-Control>
//     </div>
// </form>
//
// Style guide: forms.custom.inline

[pam-Form] [pam-Form-Inline] {
    margin-bottom: @form-input-group-margin;
    position: relative;

    > div {
        margin-bottom: 0;
    }

    [pam-Form-Icon] {
        align-items: center;
        background: transparent;
        bottom: 0;
        box-sizing: border-box;
        display: inline-flex;
        justify-content: center;
        left: 0;
        right: auto;
        margin: 0;
        position: absolute;
        top: 0;
        width: @space-48;
    }

    [pam-Form-Control] {
        box-sizing: border-box;
        display: block;
        padding-left: @space-48;
        width: 100%;
    }

    .hook-form-input-group;
}

[pam-Form] [pam-Form-Inline~="reverse"] {
    [pam-Form-Icon] {
        left: auto;
        right: 0;
    }

    [pam-Form-Control] {
        padding-left: @space-8;
        padding-right: @space-48;
        width: 100%;
    }
}


// Sub-object: Lego
// ========================================================================

// Lego
//
// `pam-Form-Group="lego"` extend form controls by adding icons, buttons, selects
//  before or after text-based form controls as lego bricks.
//
// Markup:
// <form pam-Form>
//     <div pam-Form-Group="lego">
//         <div pam-Form-Group-Addon>
//             <select>
//                 <option value="honda">+46</option>
//                 <option value="toyota">+211</option>
//                 <option value="nissan">+1-284</option>
//             </select>
//         </div>
//         <input id="addon-lego" type="text" placeholder="One addon" pam-Form-Control>
//     </div>
//     <div pam-Form-Group="lego">
//         <input id="addon-lego" type="text" placeholder="One addon" pam-Form-Control>
//         <div pam-Form-Group-Addon>
//             <input type="button" pam-Button="small" value="send">
//         </div>
//     </div>
//     <div pam-Form-Group="lego">
//         <div pam-Form-Group-Addon>
//             <select>
//                 <option value="honda">+46</option>
//                 <option value="toyota">+211</option>
//                 <option value="nissan" selected>+1-284</option>
//             </select>
//         </div>
//             <input id="addon-lego" type="text" placeholder="Two addons" pam-Form-Control>
//         <div pam-Form-Group-Addon>
//             <input type="button" pam-Button="small" value="send">
//         </div>
//     </div>
// </form>
//
// Style guide: forms.custom.lego

[pam-Form] [pam-Form-Group~="lego"] {
    display: inline-flex;
    margin-bottom: @space-16;

    [pam-Form-Group-Addon] {
        // background-color: @form-border;
        border-radius: @form-border-radius;
        color: @form-color;
        font-size: @font-size-base;
        margin: 0;
        min-width: @form-input-group-addon-space;
        position: relative;
        text-align: center;
        // vertical-align: middle;
        white-space: nowrap;
    }

    [pam-Form-Control] {
        margin-bottom: 0;
        // padding: @space-16;
        position: relative;
        z-index: 2;

        &:focus {
            z-index: 3;
        }
    }

    [pam-Form-Group-Addon],
    [pam-Form-Control] {
        display: flex;

        > * {
            margin-bottom: 0;
            min-width: @form-input-group-addon-space;
        }

        &:not(:first-child):not(:last-child) {
            border-radius: 0;
        }
    }

    [pam-Form-Control]:first-child,
    [pam-Form-Group-Addon]:first-child {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;

        * {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
    }

    [pam-Form-Group-Addon]:first-child {
        > * {
            border-right-color: transparent;
        }
    }

    [pam-Form-Group-Addon]:first-child {
        > *:focus {
            border-right-color: @form-focus-border;
        }
    }

    [pam-Form-Control]:last-child,
    [pam-Form-Group-Addon]:last-child {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;

        * {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    [pam-Form-Group-Addon]:last-child {
        > * {
            border-left-color: transparent;
        }
    }

    [pam-Form-Group-Addon]:last-child {
        > *:focus {
            border-left-color: @form-focus-border;
        }
    }
}

// Sub-object: Lego block
// ========================================================================

// Lego block
//
// `pam-Form-Group="lego block"` display lego brick as a block.
//
// Markup:
// <form pam-Form>
//     <div pam-Form-Group="lego block">
//         <div pam-Form-Group-Addon>
//             <select>
//                 <option value="honda">+46</option>
//                 <option value="toyota">+211</option>
//                 <option value="nissan">+1-284</option>
//             </select>
//         </div>
//         <input id="addon-lego" type="text" placeholder="One addon" pam-Form-Control>
//     </div>
//     <div pam-Form-Group="lego block">
//         <input id="addon-lego" type="text" placeholder="One addon" pam-Form-Control>
//         <div pam-Form-Group-Addon>
//             <input type="button" pam-Button="small" value="send">
//         </div>
//     </div>
//     <div pam-Form-Group="lego block">
//         <div pam-Form-Group-Addon>
//             <select>
//                 <option value="honda">+46</option>
//                 <option value="toyota">+211</option>
//                 <option value="nissan" selected>+1-284</option>
//             </select>
//         </div>
//             <input id="addon-lego" type="text" placeholder="Two addons" pam-Form-Control>
//         <div pam-Form-Group-Addon>
//             <input type="button" pam-Button="small" value="send">
//         </div>
//     </div>
// </form>
//
// Style guide: forms.custom.lego.block

[pam-Form] [pam-Form-Group~="block"] {
    display: flex;
}


//  Select
// ========================================================================

// Select
//
// `pam-Select` turns on custom styling of the select element.
//
// Markup:
// <form pam-Form="stacked">
//     <label for="select-native">Native select</label>
//     <select id="select-native">
//         <option value="geek">Geek</option>
//         <option value="nerd">Nerd</option>
//         <option value="dork">Dork</option>
//     </select>
//     <label for="select-custom">Custom select</label>
//     <select id="select-custom" pam-Select="">
//         <option value="geek">Geek</option>
//         <option value="nerd">Nerd</option>
//         <option value="dork">Dork</option>
//     </select>
//     <label for="select-multiple">Multiple select</label>
//     <select id="select-multiple" multiple>
//         <option value="geek">Geek</option>
//         <option value="nerd">Nerd</option>
//         <option value="dork">Dork</option>
//     </select>
// </form>
//
// Style guide: forms.custom.select

@form-select-background-image: "data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27%3E%3Cpath%20d%3D%27M10%201L5%208h10l-5-7zm0%2018l5-7H5l5%207z%27%2F%3E%3C%2Fsvg%3E";
@form-select-background-size: 12px;
@form-select-background-offset: @space-8;
@form-select-background-color: @form-background;

[pam-Form] select[pam-Select]:not([multiple]) {
    appearance: none;
    background: url(@form-select-background-image) right @form-select-background-offset center;
    background-color: @form-select-background-color;
    background-repeat: no-repeat;
    background-size: @form-select-background-size @form-select-background-size;
    color: @skin-text-primary;
    display: inline-block;
    max-width: 100%;
    padding-right: @space-28;
    vertical-align: middle;

    &::-ms-expand {
        display: none;
    }

    // .hook-form-select;
}


// Sub-Object: Form control
// ========================================================================

// Traits
//
// `pam-form-control` is a generic trait to be used with form controls
// to optimize and trim their behaviour when needed.
//
// Markup:
// <form pam-Form="stacked">
//     <label for="input-borderless">So borderless!</label>
//     <input id="input-borderless" placeholder="Borderless" pam-Form-Control="borderless">
//     <label for="input-fluid">Fluid like water</label>
//     <input id="input-fluid" placeholder="Fluid" pam-Form-Control="fluid">
// </form>
//
// Weight: 20
//
// Style guide: forms.traits

[pam-Form] [pam-Form-Control~="borderless"] {
    border-color: transparent;
    transition: box-shadow 0.3s ease;
}

[pam-Form] [pam-Form-Control~="borderless"]:focus {
    border-color: transparent;
    box-shadow: 0 1px 3px @skin-dark;
}

[pam-Form] [pam-Form-Control~="fluid"] {
    width: 100%;
}


// Experimental
// ==================================================================

// Experimental
//
// Following forms rulez are experimental, and has **no offical browser support**.
//
// Weight: 25
//
// Style guide: forms.experimental


//  Sub-object: Floating label
// ========================================================================

// Floating label
//
// `pam-Field` with `input` and `label` element creates a floating label composite.
//
// <div pam-Alert="callout info">
//    Experimental: CSS only floating label, evaluating to
//    implement for evergreen browsers.
// </div>
//
// Markup:
// <form pam-Form>
//     <div pam-Field>
//         <input type="text" name="fullname" id="fullname" placeholder="Jon Doe">
//         <label for="fullname">Nickname</label>
//     </div>
// </form>
//
// Style guide: forms.experimental.label

[pam-Field] {
    display: inline-flex;
    flex-flow: column-reverse;
    margin-bottom: 1em;
}

[pam-Field] {
    label,
    input {
        transition: all 0.2s;
        touch-action: manipulation;
    }

    input {
        position: relative;
        -webkit-appearance: none;
    }

    input:focus {
        border-bottom: 1px solid #666;
        outline: 0;
    }

    label {
        font-size: 0.875rem;
    }

    input:placeholder-shown + label {
        cursor: text;
        max-width: 66.66%;
        overflow: hidden;
        text-overflow: ellipsis;
        transform-origin: left bottom;
        transform: translate(0.5rem, 2.4rem) scale(1);
        white-space: nowrap;
    }

    ::-webkit-input-placeholder {
        opacity: 0;
        transition: inherit;
    }

    input:focus::-webkit-input-placeholder {
        opacity: 1;
    }

    input:not(:placeholder-shown) + label,
    input:focus + label {
        cursor: pointer;
        font-size: 0.75rem;
        transform: translate(0.5rem, 1.4rem) scale(1);
    }
}


// Deprecated
// ==================================================================

// Deprecated
//
// Following form rulez will be deprecated in version 1.1.0.
//
// Weight: 27
//
// Style guide: forms.deprecated

// Input icon
// ========================================================================

// Input icon
//
// `pam-Input-Icon` enables icons to be used with a input.
//
//<div pam-Alert="callout warning">
//    Deprecated: Styling for legacy input icons. Support will be dropped
//    after PAM version 1.1.
// </div>
//
// Markup:
// <form pam-Form>
//     <div pam-Input-Icon>
//         <label for="icon">
//         <img src="http://placehold.it/24x24">
//         </label>
//         <input id="icon" type="text" placeholder="Icon">
//     </div>
// </form>
//
// Style guide: forms.deprecated.input-icon

[pam-Form] [pam-Input-Icon],
[pam-Form] [pam-Select-Icon] {
    position: relative;

    label {
        background: transparent;
        position: absolute;
        top: 0;
        left: 0;
        margin: 0;
        width: @space-72;
        box-sizing: border-box;
    }

    input,
    > select {
        display: block;
        padding-left: @space-72;
        width: 100%;
        box-sizing: border-box;
    }

    .hook-form-input-icon;
}

// Input borderless
// ========================================================================

// Input borderless
//
// `pam-Input="borderless"` removes the form field border.
//
// <div pam-Alert="callout warning">
//    Deprecated: Styling for borderless legacy form fields. Support will be dropped
//    after PAM version 1.1.
// </div>
//
// Markup:
// <form pam-Form="stacked">
//     <label for="borderless">Borderless input</label>
//     <input id="borderless" type="text" placeholder="Borderless" pam-Input="borderless">
// </form>
//
// Style guide: forms.deprecated.input-borderless

[pam-Form] input[pam-Input~="borderless"],
[pam-Form] select[pam-Input~="borderless"],
[pam-Form] textarea[pam-Input~="borderless"] {
    border: none;

    .hook-form-input-borderless;
}

[pam-Form] input[pam-Input~="borderless"]:focus {
    outline: 0;
    border: transparent;

    .hook-form-input-borderless-focus;
}


// Sub-object: Select box
// ========================================================================

// Select box
//
// `pam-Select-Box` turns of the platform native styling of select boxes
//  and adds normalized styling for cross browser compatibility.
//
// <div pam-Alert="callout warning">
//    Deprecated: Support for select box styling will be dropped
//    after PAM version 1.1. Use custom select instead `pam-Select`.
// </div>
//
// Markup:
// <form pam-Form>
//     <div pam-Select-Box="{{modifier_class}}">
//         <select>
//             <option value="geek">Geek</option>
//             <option value="nerd">Nerd</option>
//             <option value="dork">Dork</option>
//         </select>
//     </div>
// </form>
//
// multiple - enables the multi select box.
// fluid - enables a select box with fluid width.
// borderless - removes the select box borders.
//
// Style guide: forms.deprecated.selectbox

[pam-Form] [pam-Select-Box] {
    background: @form-background;
    box-sizing: border-box;
    display: inline-block;
    font-size: @form-font-size;
    line-height: @form-line-height;
    margin: 0 0 @space-8 0;
    position: relative;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

    .hook-select-box;

    select {
        appearance: none;
        background: transparent;
        background-image: none;
        box-shadow: none;
        box-sizing: border-box;
        margin: 0;
        padding: @form-padding-vertical @form-padding-horizontal;
        padding-right: 24px;

        &::-ms-expand {
            display: none;
        }

        &:focus {
            outline: none;
        }
    }

    &::after {
        content: " â¾";
        position: absolute;
        right: @space-base;
        top: @space-8;
    }
}

// Sub-modifier: Select box multiple

[pam-Form] [pam-Select-Box~="multiple"] {
    &::after {
        content: " ";
    }
}

// Sub-modifier: Select box fluid

[pam-Form] [pam-Select-Box~="fluid"] {
    width: 100%;

    select {
        width: 100%;
    }
}

// Sub-modifier: Select box fluid

[pam-Form] [pam-Select-Box~="borderless"] {
    select {
        border: 0;
    }
}


//  Hooks
// ========================================================================

// Hooks
//
// Use hooks to customize form.
//
// `.hook-form`
// `.hook-form-focus`
// `.hook-form-disabled`
// `.hook-form-readonly`
// `.hook-form-readonly-focus`
// `.hook-form-focus-invalid`
// `.hook-form-focus-invalid-focus`
// `.hook-form-input-borderless`
// `.hook-form-input-borderless-focus`
// `.hook-form-select`
// `.hook-form-select-multiple`
// `.hook-form-select-focus`
// `.hook-form-label`
// `.hook-form-fieldset`
// `.hook-form-legend`
// `.hook-form-stacked`
// `.hook-form-aligned`
// `.hook-form-group`
// `.hook-form-input-icon`
// `.hook-form-input-group`
// `.hook-select-box`
// `.hook-form-message`
// `.hook-form-message-inline`
//
// Weight: 30
//
// Style guide: forms.hooks

/* stylelint-disable block-no-empty */
.hook-form() {}
.hook-form-focus() {}
.hook-form-disabled() {}
.hook-form-readonly() {}
.hook-form-readonly-focus() {}
.hook-form-focus-invalid() {}
.hook-form-focus-invalid-focus() {}
.hook-form-input-borderless() {}
.hook-form-input-borderless-focus() {}
.hook-form-select() {}
.hook-form-select-multiple() {}
.hook-form-select-focus() {}
.hook-form-label() {}
.hook-form-fieldset() {}
.hook-form-legend() {}
.hook-form-stacked() {}
.hook-form-aligned() {}
.hook-form-group() {}
.hook-form-input-icon() {}
.hook-form-input-group() {}
.hook-select-box() {}
.hook-form-message() {}
.hook-form-message-inline() {}
/* stylelint-enable */
