// spacing(@property, @prefix, @spaces, @startIndex)
//
// Generate a given number of spaces of a specific space type.
//
// @property - Use margin or padding.
// @prefix = '' - Space attribute value prefix.
// @spaces - Number of spaces sizes to generate.
// @startIndex = 1 - What size to start on.
//
// Style guide: mixins.spacing

//  Spacing
// ==================================================================

.spacing(@property, @prefix: "", @spaces, @startIndex: 1) when (@startIndex =< @spaces) {
    @selectorValue: if((@startIndex <= 1), "@{prefix}", "@{prefix}:@{startIndex}");

    [pam-space~="@{selectorValue}"] {
        @propertyValue: if((@startIndex <= 1), "space-x", "space-x@{startIndex}");

        @{property}: @@propertyValue;
    }

    .spacing(@property, @prefix, @spaces, (@startIndex + 1));
}

//  Spacing-x
// ==================================================================

// spacing-x(@property, @prefix, @spaces, @startIndex)
//
// Generate a given number of spaces for the
// x axis (left and right).
//
// @property - Use margin or padding.
// @prefix = '' - Space attribute value prefix. Format `{p|m}:{x}`
// @spaces - Number of spaces sizes to generate.
// @startIndex = 1 - What size to start on.
//
// Style guide: mixins.spacing.spacing-x

.spacing-x(@property, @prefix: "", @spaces, @startIndex: 1) when (@startIndex =< @spaces) {
    @selectorValue: if((@startIndex <= 1), "@{prefix}", "@{prefix}:@{startIndex}");

    @propertyLeft: if((@property = margin), margin-left, padding-left);
    @propertyRight: if((@property = margin), margin-right, padding-right);

    [pam-space~="@{selectorValue}"] {
        @propertyValue: if((@startIndex <= 1), "space-x", "space-x@{startIndex}");

        @{propertyLeft}: @@propertyValue;
        @{propertyRight}: @@propertyValue;
    }

    .spacing-x(@property, @prefix, @spaces, (@startIndex + 1));
}

//  Spacing-y
// ==================================================================

// spacing-y(@property, @prefix, @spaces, @startIndex)
//
// Generate a given number of spaces for the
// y axis (top and bottom).
//
// @property - Use margin or padding.
// @prefix = '' - Space attribute value prefix. Format `{p|m}:{x}`
// @spaces - Number of spaces sizes to generate.
// @startIndex = 1 - What size to start on.
//
// Style guide: mixins.spacing.spacing-y

.spacing-y(@property, @prefix: "", @spaces, @startIndex: 1) when (@startIndex =< @spaces) {
    @selectorValue: if((@startIndex <= 1), "@{prefix}", "@{prefix}:@{startIndex}");

    @propertyTop: if((@property = margin), margin-top, padding-top);
    @propertyBottom: if((@property = margin), margin-bottom, padding-bottom);

    [pam-space~="@{selectorValue}"] {
        @propertyValue: if((@startIndex <= 1), "space-x", "space-x@{startIndex}");

        @{propertyTop}: @@propertyValue;
        @{propertyBottom}: @@propertyValue;
    }

    .spacing-y(@property, @prefix, @spaces, (@startIndex + 1));
}
