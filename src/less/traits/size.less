// Size
//
// Control element dimensions `width`, `min-width`, `max-width`, `height`, `min-height`, `max-height` which follows the format pam-size="`{type}`:`{size | fractions}`".
//
//
// * selector: `pam-size`,
// * type: `w = width` | `h = height`
// * size: `0-20` | `full` | `auto` | `viewport`
// * fractions: `@fractions = 1, 2, 3, 4, 5, 6`
//
// Weight: 10
//
// Style guide: traits.size

// ==================================================================
//  Size
// ==================================================================

[pam-size] {
    .hook-size;
}

//  Width modifiers
// ==================================================================

// Auto Width
//
// Set width to auto with `w:auto`.
//
// Markup:
// <div pam-size="w:auto" pam-space="p:2" pam-skin="bg:gray:200">Width auto</div>
//
// Weight: 0
//
// Style guide: traits.size.width-auto

[pam-size~="w:auto"] {
    width: auto !important;
}

// Viewport Width
//
// Set width to cover the enitre width of the viewport with `w:viewport`.
//
// Markup:
// <div pam-space="pb:4" pam-overflow="auto">
//     <div pam-size="w:viewport h:1" pam-skin="bg:gray:200"></div>
// </div>
//
// Weight: 1
//
// Style guide: traits.size.width-viewport

[pam-size~="w:viewport"] {
    width: 100vw !important;
}

//  Fixed
// ------------------------------------------------------------------

// Fixed Width
//
// Set a fixed width with `w:{ number }px`. These are exact pixel widths
// which covers multiples of four up to 12px.
//
// Markup:
// <div pam-size="{{modifier_class}} h:1" pam-skin="bg:gray:200"></div>
//
// w%3Apx - Set width to 1px.
// w%3A2px - Set width to 2px.
// w%3A4px - Set width to 4px.
// w%3A8px - Set width to 8px.
// w%3A12px - Set width to 12px.
//
// Weight: 2
//
// Style guide: traits.size.width-fixed

// Fixed multiplier width
//
// Set a  fixed width with `w:{ number }`. With the range `0-20`
// and the multiplier for `number` is 16.
//
// Markup:
// <div pam-size="{{modifier_class}} h:1" pam-skin="bg:gray:200"></div>
//
// w%3A0 - Set width to 0.
// w%3A1 - Set width to 1 * multiplier.
// w%3A5 - Set width to 5.* multiplier
// w%3A10 - Set width to 10 * multiplier.
// w%3A15 - Set width to 15 * multiplier.
// w%3A20 - Set width to 20 * multiplier.
//
// Weight: 3
//
// Style guide: traits.size.width-fixed-multiplier

[pam-size~="w:px"] {
    width: 1px !important;
}

[pam-size~="w:2px"] {
    width: @space-2 !important;
}

[pam-size~="w:4px"] {
    width: @space-4 !important;
}

[pam-size~="w:8px"] {
    width: @space-8 !important;
}

[pam-size~="w:12px"] {
    width: @space-12 !important;
}

.sizes(pam-size, width, 20, "w:") !important;

//  Fractions
// ------------------------------------------------------------------

// Fraction Width
//
// To set percentage based width use `w:{ fraction }` or `w:full`.
// By default supported fractions are `1, 2, 3, 4, 5, 6`.
//
// Markup:
//     <div pam-flex pam-skin="primary:light">
//         <div pam-size="{{modifier_class}} h:2" pam-text="center" pam-skin="primary on:primary">
//         </div>
//     </div>
//
// w%3A1-6 - Set width to 1/6.
// w%3A1-5 - Set width to 1/5.
// w%3A1-4 - Set width to 1/4.
// w%3A1-3 - Set width to 1/3.
// w%3A1-2 - Set width to 1/2.
// w%3Afull - Set width to full.
//
// Weight: 3
//
// Style guide: traits.size.width-fractions

[pam-size~="w:full"] {
    width: 100% !important;
}

.fractions(pam-size, "w:");

//  Fractions responsive
// ------------------------------------------------------------------

// Responsive Width
//
// To set percentage based width use `w:{ fraction }` or `w:full`.
// By default supported fractions are `1, 2, 3, 4, 5, 6`.
//
// <span pam-Tag="info">Tip</span> Adjust the window width to see the widths change.
//
// Markup:
//     <div pam-flex pam-skin="primary:light">
//         <div pam-size="w:full {{modifier_class}} h:2" pam-text="center" pam-skin="primary on:primary">
//         </div>
//     </div>
//
// sm%3Aw%3A1-6 - Set width to 1/6 from small screen and up.
// md%3Aw%3A1-5 - Set width to 1/5 from medium screen and up.
// lg%3Aw%3A1-4 - Set width to 1/4 from large screen and up.
// xl%3Aw%3A1-3 - Set width to 1/3 from xlarge screen and up.
//
// Weight: 4
//
// Style guide: traits.size.width-responsive

.fractions-responsive(pam-size, "w:");

//  Min
// ------------------------------------------------------------------

// Min-Width
//
// Control minimum width with `min-w:0` or `min-w:full`.
//
// Markup:
// <div pam-space="p:4" pam-skin="bg:gray:100">
//     <div pam-size="min-w:full" pam-skin="bg:gray:300" pam-space="p:4">
//         Min width full
//     </div>
// </div>
//
// Weight: 5
//
// Style guide: traits.size.min-width

[pam-size~="min-w:0"] {
    min-width: 0 !important;
}

[pam-size~="min-w:full"] {
    min-width: 100% !important;
}

//  Max
// ------------------------------------------------------------------

// Max-Width
//
// To set max-width of an element use `max-w:{ size }`. Default supported max
// width sizes are the screen width sizes.
//
// Markup:
// <div pam-size="{{modifier_class}} h:1" pam-skin="bg:gray:200"></div>
//
// max-w%3Asm - Set maxium width to small.
// max-w%3Amd - Set maxium width to medium.
// max-w%3Alg - Set maxium width to large.
// max-w%3Axl - Set maxium width to xlarge.
//
// Weight: 6
//
// Style guide: traits.size.max-width

[pam-size~="max-w:sm"] {
    max-width: @screen-sm !important;
}

[pam-size~="max-w:md"] {
    max-width: @screen-md !important;
}

[pam-size~="max-w:lg"] {
    max-width: @screen-lg !important;
}

[pam-size~="max-w:xl"] {
    max-width: @screen-xl !important;
}

[pam-size~="max-w:full"] {
    max-width: 100% !important;
}

//  Height modifiers
// ==================================================================

// Auto Height
//
// Set height to auto with `w:auto`.
//
// Markup:
// <div pam-size="h:auto w:10" pam-space="p:4" pam-skin="bg:gray:200">Height auto</div>
//
// Weight: 7
//
// Style guide: traits.size.height-auto

[pam-size~="h:auto"] {
    height: auto !important;
}

// Viewport Height
//
// Set height to viewport height with `w:viewport`.
//
// Markup:
// <div pam-size="h:viewport" pam-skin="bg:gray:200"></div>
//
// Weight: 8
//
// Style guide: traits.size.height-viewport

[pam-size~="h:viewport"] {
    height: 100vh !important;
}

//  Fixed
// ------------------------------------------------------------------

// Fixed height
//
// Set a fixed height with `h:{ number }px`. These are exact pixel heights
// which covers multiples of four up to 12px.
//
// Markup:
// <div pam-size="{{modifier_class}} w:2" pam-skin="bg:gray:200"></div>
//
// h%3Apx - Set height to 1px.
// h%3A2px - Set height to 2px.
// h%3A4px - Set height to 4px.
// h%3A8px - Set height to 8px.
// h%3A12px - Set height to 12px.
//
// Weight: 9
//
// Style guide: traits.size.height-fixed

// Fixed multiplier height
//
// Set a fixed height with `h:{ number | px }`. Multiplier for `number` is 16.
//
// Markup:
// <div pam-size="{{modifier_class}} w:2" pam-skin="bg:gray:200"></div>
//
// h%3A0 - Set height to 0.
// h%3A1 - Set height to 1 * multiplier.
// h%3A2 - Set height to 2.* multiplier
// h%3A3 - Set height to 3 * multiplier.
// h%3A4 - Set height to 4 * multiplier.
// h%3A5 - Set height to 5 * multiplier.
//
// Weight: 10
//
// Style guide: traits.size.height-fixed-multiplier

[pam-size~="h:px"] {
    height: @space-1 !important;
}

[pam-size~="h:2px"] {
    height: @space-2 !important;
}

[pam-size~="h:4px"] {
    height: @space-4 !important;
}

[pam-size~="h:8px"] {
    height: @space-8 !important;
}

[pam-size~="h:12px"] {
    height: @space-12 !important;
}

.sizes(pam-size, height, 20, "h:") !important;

//  Full
// ------------------------------------------------------------------

// Full Height
//
// Set height to 100% of parent element with `w:full`.
//
// Markup:
// <div pam-size="h:15">
//     <div pam-size="h:full w:5" pam-skin="bg:gray:200"></div>
// </div>
//
// Weight: 11
//
// Style guide: traits.size.height-full

[pam-size~="h:full"] {
    height: 100% !important;
}

//  Min
// ------------------------------------------------------------------

// Min-Height
//
// Control minimum height with `min-h:0`, `min-h:full` and `min-h:viewport`.
//
// Markup:
// <div pam-size="h:10" pam-space="p:4" pam-skin="bg:gray:100">
//     <div pam-size="min-h:full" pam-flex="center middle" pam-skin="bg:gray:300" pam-space="p:4">
//         Min height full
//     </div>
// </div>
//
// Weight: 12
//
// Style guide: traits.size.min-height

[pam-size~="min-h:0"] {
    min-height: 0 !important;
}

[pam-size~="min-h:full"] {
    min-height: 100% !important;
}

[pam-size~="min-h:viewport"] {
    min-height: 100vh !important;
}

//  Max
// ------------------------------------------------------------------

// Max-Height
//
// Control maximum height with `max-h:full` or `max-h:viewport`.
//
// Markup:
// <div pam-size="h:4" pam-space="p:4" pam-skin="bg:gray:100">
//     <div pam-size="max-h:full" pam-flex="center middle" pam-skin="bg:gray:300" pam-space="p:4">
//         Max height full
//     </div>
// </div>
//
// Weight: 13
//
// Style guide: traits.size.max-height

[pam-size~="max-h:full"] {
    max-height: 100% !important;
}

[pam-size~="max-h:viewport"] {
    max-height: 100vh !important;
}

// Hooks
// ==================================================================

// Hooks
//
// `.hook-size`
//
// Weight: 20
//
// Style guide: traits.size.hooks

/* stylelint-disable block-no-empty */
.hook-size() {
}
/* stylelint-enable */
