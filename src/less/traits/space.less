// Space
//
// For control of margin and padding spacing use the `pam-space` trait.
//
// Markup:
// <span pam-space="p" pam-border>Padding x</span>
// <span pam-space="p:2" pam-border>Padding x2</span>
// <span pam-space="p:3" pam-border>Padding x3</span>
//
// Weight: 4
//
// Style guide: traits.space

//  Space
// ==================================================================

[pam-space~="none"] {
    margin: 0 !important;
    padding: 0 !important;
}

//  Margin
// ==================================================================

[pam-space~="m:none"] {
    margin: 0 !important;
}

[pam-space~="m:y:none"] {
    margin-top: 0 !important;
    margin-bottom: 0 !important;
}

[pam-space~="m:x:none"] {
    margin-left: 0 !important;
    margin-right: 0 !important;
}

[pam-space~="m:y:auto"] {
    margin-top: auto !important;
    margin-bottom: auto !important;
}

[pam-space~="m:x:auto"] {
    margin-left: auto !important;
    margin-right: auto !important;
}

.spacing(margin, "m", 1, 5);
.spacing(margin-top, "m:t", 1, 5);
.spacing(margin-right, "m:r", 1, 5);
.spacing(margin-bottom, "m:b", 1, 5);
.spacing(margin-left, "m:l", 1, 5);

//  Padding
// ==================================================================

[pam-space~="p:none"] {
    padding: 0;
}

[pam-space~="p:y:none"] {
    padding-top: 0;
    padding-bottom: 0;
}

[pam-space~="p:x:none"] {
    padding-left: 0;
    padding-right: 0;
}

[pam-space~="p:y:auto"] {
    padding-top: auto;
    padding-bottom: auto;
}

[pam-space~="p:x:auto"] {
    padding-left: auto;
    padding-right: auto;
}

.spacing(padding, "p", 1, 5);
.spacing(padding-top, "p:t", 1, 5);
.spacing(padding-right, "p:r", 1, 5);
.spacing(padding-bottom, "p:b", 1, 5);
.spacing(padding-left, "p:l", 1, 5);

// spacing(@spaceType, @startIndex: 1, @prefix: "", @spaces)
//
// Generate a given number of spaces of a specific space type
//
// @columns - Number of columns.
// @startIndex = 1 - What number to start on.
// @prefix = '' - Attribute value prefix.
//
// Style guide: mixins.spacing

.spacing(@spaceType, @spacePrefix: "", @startIndex: 1, @spaces) when (@startIndex =< @spaces) {
    @selValue: if((@startIndex <= 1), "@{spacePrefix}", "@{spacePrefix}:@{startIndex}");

    [pam-space~="@{selValue}"] {
        @temp: if((@startIndex <= 1), "space-x", "space-x@{startIndex}");

        @{spaceType}: @@temp;
    }

    .spacing(@spaceType, @spacePrefix, (@startIndex + 1), @spaces);
}

// .spacing-x(@spaceType, @spacePrefix: "", @startIndex: 1, @spaces) when (@startIndex =< @spaces) {
//     @selValue: if((@startIndex <= 1), "@{spacePrefix}", "@{spacePrefix}:@{startIndex}");

//     @spaceTypeLeft: @;

//     [pam-space~="@{selValue}"] {
//         @temp: if((@startIndex <= 1), "space-x", "space-x@{startIndex}");

//         @{spaceTypeLeft}: @@temp;
//         @{spaceTypeRight}: @@temp;
//     }

//     .spacing-x(@spaceType, @spacePrefix, (@startIndex + 1), @spaces);
// }
